// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	metrics "github.com/containers-ai/alameda/datahub/pkg/kubernetes/metrics"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetricsDB is a mock of MetricsDB interface
type MockMetricsDB struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsDBMockRecorder
}

// MockMetricsDBMockRecorder is the mock recorder for MockMetricsDB
type MockMetricsDBMockRecorder struct {
	mock *MockMetricsDB
}

// NewMockMetricsDB creates a new mock instance
func NewMockMetricsDB(ctrl *gomock.Controller) *MockMetricsDB {
	mock := &MockMetricsDB{ctrl: ctrl}
	mock.recorder = &MockMetricsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsDB) EXPECT() *MockMetricsDBMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockMetricsDB) Connect() error {
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockMetricsDBMockRecorder) Connect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMetricsDB)(nil).Connect))
}

// Close mocks base method
func (m *MockMetricsDB) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMetricsDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricsDB)(nil).Close))
}

// Query mocks base method
func (m *MockMetricsDB) Query(q metrics.Query) (metrics.QueryResponse, error) {
	ret := m.ctrl.Call(m, "Query", q)
	ret0, _ := ret[0].(metrics.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockMetricsDBMockRecorder) Query(q interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockMetricsDB)(nil).Query), q)
}

// MockTimeSelector is a mock of TimeSelector interface
type MockTimeSelector struct {
	ctrl     *gomock.Controller
	recorder *MockTimeSelectorMockRecorder
}

// MockTimeSelectorMockRecorder is the mock recorder for MockTimeSelector
type MockTimeSelectorMockRecorder struct {
	mock *MockTimeSelector
}

// NewMockTimeSelector creates a new mock instance
func NewMockTimeSelector(ctrl *gomock.Controller) *MockTimeSelector {
	mock := &MockTimeSelector{ctrl: ctrl}
	mock.recorder = &MockTimeSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimeSelector) EXPECT() *MockTimeSelectorMockRecorder {
	return m.recorder
}

// is_timeselector mocks base method
func (m *MockTimeSelector) is_timeselector() {
	m.ctrl.Call(m, "is_timeselector")
}

// is_timeselector indicates an expected call of is_timeselector
func (mr *MockTimeSelectorMockRecorder) is_timeselector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "is_timeselector", reflect.TypeOf((*MockTimeSelector)(nil).is_timeselector))
}
